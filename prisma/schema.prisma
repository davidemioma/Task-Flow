// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//npm i -D prisma
//npx prisma init
//npx prisma generate - Do this after creating a new model
//npx prisma db push - to push to your database.
//npx prisma migrate reset - to reset your databse.
//npx prisma studio - to view your data

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

model Board{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  orgId String
  title String
  imageId String
  imageThumbUrl String @db.String
  imageFullUrl String @db.String
  imageUserName String @db.String
  imageLinkHTML String @db.String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lists List[]
}

model List{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  boardId String @db.ObjectId
  order Int
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  cards Card[]
}

model Card{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  listId String @db.ObjectId
  order Int
  title String
  description String? @db.String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  list List @relation(fields: [listId], references: [id], onDelete: Cascade)
}

model ActivityLog{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  orgId String
  action ACTION
  entityId String @db.ObjectId
  entityType ENTITY_TYPE
  entityTitle String
  userId String
  userImage String @db.String
  username String @db.String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgLimit{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  orgId String @unique
  count Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgSubscription{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  orgId String @unique
  stripeCustomerId       String? @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String? @unique @map(name: "stripe_subscription_id")
  stripePriceId          String? @unique @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @unique @map(name: "stripe_current_period_end")
}
